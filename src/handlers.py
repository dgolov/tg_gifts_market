from aiogram import Dispatcher
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from config import CHANNEL_ID, logger
from src.buttons import main_menu, top_up_menu, profile_menu
from src.helpers import check_subscription
from src.patterns import Menu


async def start_command(message: Message):
    """
    :param message:
    :return:
    """
    username = message.from_user.username
    user_id = message.from_user.id
    logger.debug(f"[Handlers] Start command from user: {username} (id: {user_id})")
    is_subscribed = await check_subscription(user_id)

    if is_subscribed:
        await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu)
    else:
        logger.debug(f"[Handlers] {username} (id: {user_id}) is not subscribed")
        await message.answer(
            f"‚ö†Ô∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!\n"
            f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å: {CHANNEL_ID}\n"
            f"–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /start"
        )


async def top_up_balance(message: Message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'
    :param message:
    :return:
    """
    username = message.from_user.username
    user_id = message.from_user.id
    logger.debug(f"[Handlers] Top up balance command from user: {username} (id: {user_id})")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=top_up_menu)


async def show_profile(message: Message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ—Ñ–∏–ª—å'
    :param message:
    :return:
    """
    username = message.from_user.username
    user_id = message.from_user.id
    logger.debug(f"[Handlers] Show profile command from user: {username} (id: {user_id})")
    await message.answer("üë§ –ü—Ä–æ—Ñ–∏–ª—å:", reply_markup=profile_menu)


async def back_to_main(message: Message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'
    :param message:
    :return:
    """
    username = message.from_user.username
    user_id = message.from_user.id
    logger.debug(f"[Handlers] Back to main command from user: {username} (id: {user_id})")
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)


async def cancel_process(message: Message, state: FSMContext):
    """ –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
    :param message:
    :param state:
    :return:
    """
    await state.clear()
    await message.answer("üö´ –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)


def register_main_handlers(dispatcher: Dispatcher):
    dispatcher.message.register(start_command, CommandStart())
    dispatcher.message.register(top_up_balance, lambda msg: msg.text == Menu.BALANCE)
    dispatcher.message.register(cancel_process, lambda msg: msg.text == Menu.CANCEL)
    dispatcher.message.register(show_profile, lambda msg: msg.text == Menu.PROFILE)
    dispatcher.message.register(back_to_main, lambda msg: msg.text == Menu.BACK)
