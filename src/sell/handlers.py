from aiogram import Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from config import CHANNEL_ID, logger, dp, bot
from src.buttons import colors_menu, backgrounds_menu, models_menu, patterns_menu, public_menu, main_menu, cancel_button
from src.patterns import Menu
from src.gifts import SellGift
from src.sell.logic import GiftLogic

import asyncio


async def sell_gift_start(message: Message, state: FSMContext):
    """ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ–¥–∞—Ä–∫–∞
    :param message:
    :param state:
    :return:
    """
    username = message.from_user.username
    user_id = message.from_user.id
    logger.debug(f"[Handlers.sell] Sell gift Start command from user: {username} (id: {user_id})")
    await message.answer("üìù –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞:", reply_markup=cancel_button)
    await state.set_state(SellGift.gift_name)


async def set_gift_name(message: Message, state: FSMContext):
    """ –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º
    :param message:
    :param state:
    :return:
    """
    username = message.from_user.username
    user_id = message.from_user.id
    logger.debug(f"[Handlers.sell] Sell gift name {message.text} command from user: {username} (id: {user_id})")
    await state.update_data(gift_name=message.text)
    await message.answer("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ø–æ–¥–∞—Ä–∫–∞:", reply_markup=models_menu)
    await state.set_state(SellGift.gift_model)


async def set_gift_model(message: Message, state: FSMContext):
    """ –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ–¥–∞—Ä–∫–∞
    :param message:
    :param state:
    :return:
    """
    username = message.from_user.username
    user_id = message.from_user.id
    logger.debug(f"[Handlers.sell] Sell gift model {message.text} command from user: {username} (id: {user_id})")
    await state.update_data(gift_model=message.text)
    await message.answer("üñº –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ–Ω –ø–æ–¥–∞—Ä–∫–∞ (—Ü–≤–µ—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è):", reply_markup=backgrounds_menu)
    await state.set_state(SellGift.gift_background)


async def set_gift_background(message: Message, state: FSMContext):
    """ –ü–æ–ª—É—á–∞–µ–º —Ñ–æ–Ω –ø–æ–¥–∞—Ä–∫–∞
    :param message:
    :param state:
    :return:
    """
    username = message.from_user.username
    user_id = message.from_user.id
    logger.debug(f"[Handlers.sell] Sell gift background {message.text} command from user: {username} (id: {user_id})")
    await state.update_data(gift_background=message.text)
    await message.answer("üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –ø–æ–¥–∞—Ä–∫–∞:", reply_markup=colors_menu)
    await state.set_state(SellGift.gift_color)


async def set_gift_color(message: Message, state: FSMContext):
    """ –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –ø–æ–¥–∞—Ä–∫–∞
    :param message:
    :param state:
    :return:
    """
    username = message.from_user.username
    user_id = message.from_user.id
    logger.debug(f"[Handlers.sell] Sell gift color {message.text} command from user: {username} (id: {user_id})")
    await state.update_data(gift_color=message.text)
    await message.answer("üåü –í—ã–±–µ—Ä–∏—Ç–µ —É–∑–æ—Ä –ø–æ–¥–∞—Ä–∫–∞:", reply_markup=patterns_menu)
    await state.set_state(SellGift.waiting_for_price)


@dp.message(SellGift.waiting_for_price)
async def set_gift_price(message: Message, state: FSMContext):
    """ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —É–∑–æ—Ä, —Ç–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É
    :param message:
    :param state:
    :return:
    """
    username = message.from_user.username
    user_id = message.from_user.id
    logger.debug(f"[Handlers.sell] Sell gift price {message.text} command from user: {username} (id: {user_id})")
    await state.update_data(gift_pattern=message.text)
    await message.answer("üí∞ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–¥–∞—Ä–∫–∞ –≤ TON:", reply_markup=cancel_button)
    await state.set_state(SellGift.gift_pattern)


async def set_gift_pattern(message: Message, state: FSMContext):
    """ –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–∞–∂–∏ –ø–æ–¥–∞—Ä–∫–∞
    :param message:
    :param state:
    :return:
    """
    username = message.from_user.username
    user_id = message.from_user.id
    await state.update_data(price=message.text)

    logger.debug(f"[Handlers] Sell gift pattern {message.text} command from user: {username} (id: {user_id})")

    await asyncio.sleep(1)

    data = await state.get_data()
    logger.debug(f"[Handlers] Sell gift final data - {data} from user: {username} (id: {user_id})")

    await message.answer(
        f"‚úÖ –í–∞—à –ø–æ–¥–∞—Ä–æ–∫ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∂–µ!\n\n"
        f"üéÅ –ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('gift_name')}\n"
        f"üì¶ –ú–æ–¥–µ–ª—å: {data.get('gift_model')}\n"
        f"üñº –§–æ–Ω: {data.get('gift_background')}\n"
        f"üé® –¶–≤–µ—Ç: {data.get('gift_color')}\n"
        f"üåü –£–∑–æ—Ä: {data.get('gift_pattern')}\n\n"
        f"üí∞ –¶–µ–Ω–∞: {data.get('price')}\n\n"
        f"üîÑ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≥–ª–∞–≤–Ω–æ–µ –≤ –º–µ–Ω—é?",
        reply_markup=public_menu
    )
    await state.set_state(SellGift.gift_public)


async def public_gift(message: Message, state: FSMContext):
    """ –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–∞–∂–∏ –ø–æ–¥–∞—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
    :param message:
    :param state:
    :return:
    """
    username = message.from_user.username
    user_id = message.from_user.id
    data = await state.get_data()

    logger.info(f"–ù–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –æ—Ç {username} (id: {user_id}): {data}")

    post_text = (
        f"üéÅ *–ù–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É!*\n\n"
        f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{username}  \n"
        f"üéÅ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {data.get('gift_name')}\n"
        f"üì¶ *–ú–æ–¥–µ–ª—å:* {data.get('gift_model')}\n"
        f"üñº *–§–æ–Ω:* {data.get('gift_background')}\n"
        f"üé® *–¶–≤–µ—Ç:* {data.get('gift_color')}\n"
        f"üåü *–£–∑–æ—Ä:* {data.get('gift_pattern')}\n\n"
        f"üí∞ *–¶–µ–Ω–∞:* {data.get('price')} TON\n\n"
        f"üí¨ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –≤ –õ–°: @{username}"
    )

    try:
        sent_message = await bot.send_message(CHANNEL_ID, post_text, parse_mode="Markdown")
        post_id = sent_message.message_id
        logger.debug(f"Post id - {post_id}")
        await GiftLogic().save_post_to_db(data=data, user=message.from_user, post_id=post_id)
        logger.info(f"–ü–æ–¥–∞—Ä–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ {CHANNEL_ID}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–∞—Ä–∫–∞", reply_markup=main_menu)
        return

    await message.answer(
        f"‚úÖ –í–∞—à –ø–æ–¥–∞—Ä–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ! üéâ\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ: {CHANNEL_ID}",
        reply_markup=main_menu
    )

    await state.clear()


def register_sell_handlers(dispatcher: Dispatcher):
    dispatcher.message.register(sell_gift_start, lambda msg: msg.text == Menu.SELL_GIFT)
    dispatcher.message.register(set_gift_pattern, SellGift.gift_pattern)
    dispatcher.message.register(set_gift_name, SellGift.gift_name)
    dispatcher.message.register(set_gift_model, SellGift.gift_model)
    dispatcher.message.register(set_gift_background, SellGift.gift_background)
    dispatcher.message.register(set_gift_color, SellGift.gift_color)
    dispatcher.message.register(public_gift, SellGift.gift_public)
